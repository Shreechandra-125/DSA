#### LINKED LIST ####
--------------------------------



#include<iostream>
using namespace std;
class node{
    public:
    int data;
    node* next;
    node(int num){
        data = num;
        next = NULL;
    }
};
class LinkedList{
    public:
    node* head = NULL;
    void insertAtHead(int num){
        node* newNode = new node(num);
        if(head==NULL){
            head=newNode;
            return;
        }
        node* temp=head;
        head=newNode;
        newNode->next=temp;
    }
    void insertAtTail(int num){
        node* newNode = new node(num);
        node* temp=head;
        while(temp->next!=NULL)
            temp=temp->next;
        temp->next=newNode;
    }
    void insertAtAnyPos(int pos, int num){
        node* newNode = new node(num);
        node* temp=head;
        node* temp1;
        int count=0;
        while(temp->next!=NULL){
            count++;
            if(count==pos-1){
                temp1=temp->next;
                temp->next=newNode;
                newNode->next=temp1;
                break;
            }
            temp=temp->next;
        }
    }
    void deleteAtHead(){
        if(head==NULL)
            return;
        node* temp=head;
        head=head->next;
        delete temp;
    }
    void deleteAtTail(){
        if(head==NULL)
            return;
        node* temp=head;
        while(temp->next->next!=NULL)
            temp=temp->next;
        node* temp1=temp->next;
        delete temp1;
        temp->next=NULL;
    }
    void deleteAtAnyPos(int pos){
        if(head==NULL)
            return;
        node* temp=head;
        node* temp1;
        int count=0;
        while(temp->next!=NULL){
            count++;
            if(count==pos-1){
                temp1=temp->next;
                temp->next=temp->next->next;
                delete temp1;
                break;
            }
            temp=temp->next;
        }
    }
    void deleteAnyValue(int key){
        node* temp=head;
        node* temp1;
        while(temp->next->data!=key)
            temp=temp->next;
        temp1=temp->next;
        temp->next=temp->next->next;
        delete temp1;
    }
    void display(){
        if(head==NULL)
            return;
        node* temp=head;
        while(temp!=NULL){
            cout<<temp->data<<"->";
            temp=temp->next;
        }
        cout<<"NULL"<<endl;
    }
    bool search(int key){
        node* temp=head;
        while(temp!=NULL){
            if(temp->data==key)
                return true;
            temp=temp->next;
        }
        return false;
    }
};
int main(){
    LinkedList ll;
    ll.insertAtHead(2);
    ll.display();
    ll.insertAtHead(1);
    ll.display();
    ll.insertAtTail(4);
    ll.display();
    ll.insertAtAnyPos(3,3);
    ll.display();
    ll.insertAtTail(5);
    ll.display();
    ll.insertAtTail(6);
    ll.display();
    ll.deleteAtHead();
    ll.display();
    ll.deleteAtTail();
    ll.display();
    ll.deleteAtAnyPos(2);
    ll.display();
    ll.deleteAnyValue(4);
    ll.display();
    cout<<ll.search(5)<<endl;
    cout<<ll.search(8)<<endl;
    return 0;
}



####OUTPUT:
------------------

2->NULL
1->2->NULL
1->2->4->NULL
1->2->3->4->NULL
1->2->3->4->5->NULL
1->2->3->4->5->6->NULL
2->3->4->5->6->NULL
2->3->4->5->NULL
2->4->5->NULL
2->5->NULL
1
0
